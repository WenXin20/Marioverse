 plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.151'
}

version = minecraft_version + "-" + mod_version
group = mod_group_id
java.toolchain.languageVersion = JavaLanguageVersion.of(21)
minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

base {
    archivesName = mod_id
}

repositories {
    maven {
        url "https://cursemaven.com"
        content { includeGroup "curse.maven" }
    }
    maven { url "https://maven.neoforged.net/releases" }
    maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    mavenCentral()
    jcenter()
    flatDir {
        dir 'libs'
    }
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
    compileOnly "org.spongepowered:mixin:0.8.5"

    // Imports
    implementation "curse.maven:architectury-api-${architectury_api_version}"
    implementation "curse.maven:cloth-config-${cloth_config_version}"
    implementation "curse.maven:ctm-${ctm_version}"
    implementation "curse.maven:fusion-connected-textures-${fusion_version}"
    implementation "curse.maven:geckolib-${geckolib_version}"
    implementation "curse.maven:pehkui-${pehkui_version}"
    implementation "curse.maven:roughly-enough-items-${rei_version}"
    implementation "curse.maven:spark-${spark_version}"

    // implementation "com.github.Virtuoel:Pehkui:${pehkui_version}"
    // implementation "software.bernie.geckolib:geckolib-neoforge-${minecraft_version}:${geckolib_version}"

    // implementation "curse.maven:jei-${jei_version}"
    // implementation "curse.maven:selene-${moonlight_version}"
    // implementation "curse.maven:structure-gel-api-${structure_gel_version}"
    // implementation "curse.maven:supplementaries-${supplementaries_version}"
}


runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        programArguments '-mixin.config=marioverse.mixins.json'

        modSource project.sourceSets.main
    }

    client {
        workingDirectory 'run'
        client true
        server false
        dataGenerator false
        gameTest false
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArguments.addAll '--username', 'WenXin2'
    }

    server {
        workingDirectory 'run'
        client false
        server true
        dataGenerator false
        gameTest false
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    gameTestServer {
        workingDirectory 'run'
        client false
        server false
        dataGenerator false
        gameTest true
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        workingDirectory 'run'
        client false
        server false
        dataGenerator true
        gameTest false
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArguments.addAll '--mod', 'marioverse', '--all', '--output',
                file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version       : minecraft_version,
            minecraft_version_range : minecraft_version_range,
            neo_version             : neo_version,
            neo_version_range       : neo_version_range,
            loader_version_range    : loader_version_range,
            mod_id                  : mod_id,
            mod_name                : mod_name,
            mod_license             : mod_license,
            mod_version             : mod_version,
            mod_authors             : mod_authors,
            mod_description         : mod_description,
            mixin_configs           : mixin_location
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml', '*.mixins.json']) {
        expand replaceProperties
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
//        maven {
//            name = 'GeckoLib'
//            url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
//            content {
//                includeGroup("software.bernie.geckolib")
//            }
//        }
//        maven {
//            url = "https://jitpack.io"
//        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
